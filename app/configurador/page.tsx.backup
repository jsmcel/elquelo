'use client'

import { useEffect, useMemo, useState } from 'react'
import { useRouter } from 'next/navigation'
import { useUser } from '@/app/providers'
import { toast } from 'react-hot-toast'
import {
  Plus,
  Trash2,
  Upload,
  ArrowLeft,
  ArrowRight,
  Loader2,
  QrCode,
  Calendar,
} from 'lucide-react'
import { Header } from '@/components/Header'
import { Footer } from '@/components/Footer'
import { CheckoutButton } from '@/components/CheckoutButton'
import { TShirtEditor } from '@/components/TShirtEditor'

interface Participant {
  id: string
  name: string
  email: string
  size: string
  designFile?: File | null
}

const BASE_PRICE = 29
const SIZES = ['XS', 'S', 'M', 'L', 'XL', 'XXL']
const STEPS = ['Despedida', 'Integrantes', 'Crear Grupo']
const FALLBACK_QR_URL = `${process.env.NEXT_PUBLIC_APP_URL || 'https://elquelo.com'}/bienvenida`

const createParticipant = (): Participant => ({
  id: crypto.randomUUID(),
  name: '',
  email: '',
  size: 'M',
  designFile: null,
})

export default function ConfiguratorPage() {
  const { user, loading } = useUser()
  const router = useRouter()

  const [checkingAccess, setCheckingAccess] = useState(true)
  const [step, setStep] = useState(1)
  const [groupName, setGroupName] = useState('')
  const [eventDate, setEventDate] = useState('')
  const [participants, setParticipants] = useState<Participant[]>([])
  const [bulkNamesInput, setBulkNamesInput] = useState('')
  const [defaultQrUrl, setDefaultQrUrl] = useState(FALLBACK_QR_URL)
  const [kitGenerated, setKitGenerated] = useState(false)
  const [generating, setGenerating] = useState(false)
  const [createdCodes, setCreatedCodes] = useState<string[]>([])
  const [editorOpen, setEditorOpen] = useState(false)
  const [editingParticipant, setEditingParticipant] = useState<Participant | null>(null)
  const [qrData, setQrData] = useState<{ code: string; url: string } | null>(null)

  useEffect(() => {
    if (!loading) {
      if (!user) {
        router.replace('/auth/login?redirect=/configurador')
      }
    }
  }, [loading, user, router])

  useEffect(() => {
    if (!loading && user) {
      const checkExisting = async () => {
        try {
          const response = await fetch('/api/user/qrs')
          if (response.ok) {
            const data = await response.json()
            if ((data.qrs || []).length > 0) {
              router.replace('/dashboard')
              return
            }
          }
        } catch (error) {
          console.error('Error checking existing kit:', error)
        }
        setCheckingAccess(false)
      }
      checkExisting()
    }
  }, [loading, user, router])

  useEffect(() => {
    if (!user) {
      setDefaultQrUrl(FALLBACK_QR_URL)
      return
    }

    let active = true

    const loadProfile = async () => {
      try {
        const response = await fetch('/api/user/profile')
        if (!response.ok) {
          throw new Error('Failed to load profile')
        }
        const data = await response.json()
        if (!response.ok) {
          throw new Error(data.error || 'Failed to load profile')
        }
        const candidate =
          typeof data?.profile?.default_destination_url === 'string'
            ? data.profile.default_destination_url.trim()
            : ''

        if (candidate && active) {
          // No-op, we now use a static default
        }
      } catch (error) {
        console.error('Error loading default QR url', error)
        if (active) {
          setDefaultQrUrl(FALLBACK_QR_URL)
        }
      }
    }

    loadProfile()

    return () => {
      active = false
    }
  }, [user])

  useEffect(() => {
    if (kitGenerated) {
      setKitGenerated(false)
      setCreatedCodes([])
    }
  }, [participants, groupName, defaultQrUrl])

  const total = useMemo(() => participants.length * BASE_PRICE, [participants.length])

  const formattedEventDate = useMemo(() => {
    if (!eventDate) {
      return ''
    }
    try {
      return new Intl.DateTimeFormat('es-ES', { day: '2-digit', month: '2-digit', year: 'numeric' }).format(new Date(eventDate))
    } catch (error) {
      return eventDate
    }
  }, [eventDate])

  const addParticipant = () => setParticipants((prev) => [...prev, createParticipant()])

  const handleBulkAddParticipants = () => {
    const names = bulkNamesInput
      .split(/\r?\n/)
      .map((name) => name.trim())
      .filter(Boolean)

    if (!names.length) {
      toast.error('Anade al menos un nombre')
      return
    }

    const existing = new Set(
      participants.map((participant) => participant.name.trim().toLowerCase())
    )

    const seen = new Set<string>()
    const uniqueNames = names.filter((name) => {
      const normalized = name.toLowerCase()
      if (existing.has(normalized) || seen.has(normalized)) {
        return false
      }
      seen.add(normalized)
      return true
    })

    if (!uniqueNames.length) {
      toast.error('Todos esos nombres ya estan en la lista')
      return
    }

    const additions = uniqueNames.map((name) => ({
      ...createParticipant(),
      name,
    }))

    setParticipants((prev) => [...prev, ...additions])
    setBulkNamesInput('')
    toast.success(
      additions.length === 1
        ? 'Se anadio 1 integrante'
        : `Se anadieron ${additions.length} integrantes`
    )
  }

  const removeParticipant = (id: string) => {
    setParticipants((prev) => prev.filter((participant) => participant.id !== id))
  }

  const updateParticipant = (id: string, updates: Partial<Participant>) => {
    setParticipants((prev) =>
      prev.map((participant) => (participant.id === id ? { ...participant, ...updates } : participant))
    )
    
    // Si se está subiendo un archivo, abrir el editor con QR real
    if (updates.designFile && updates.designFile instanceof File) {
      const participant = participants.find(p => p.id === id)
      if (participant) {
        setEditingParticipant({ ...participant, ...updates })
        setEditorOpen(true)
        
        // Obtener QRs del usuario para usar el real
        fetchUserQRs(participant)
      }
    }
  }

  const fetchUserQRs = async (participant: Participant) => {
    try {
      const response = await fetch('/api/qr/user')
      if (response.ok) {
        const data = await response.json()
        const qrs = data.qrs || []
        
        // Buscar un QR que coincida con el nombre del participante o usar el primero disponible
        let selectedQR = qrs.find((qr: any) => 
          qr.title?.toLowerCase().includes(participant.name.toLowerCase()) ||
          qr.title?.toLowerCase().includes('despedida') ||
          qr.title?.toLowerCase().includes('kit')
        )
        
        // Si no encuentra uno específico, usar el más reciente
        if (!selectedQR && qrs.length > 0) {
          selectedQR = qrs[0]
        }
        
        if (selectedQR) {
          setQrData({ 
            code: selectedQR.code, 
            url: selectedQR.qr_url || `${process.env.QR_DOMAIN || 'https://elquelo.com'}/${selectedQR.code}` 
          })
        } else {
          // Fallback si no hay QRs
          const tempQrCode = `temp_${Date.now()}`
          const tempQrUrl = `${process.env.NEXT_PUBLIC_APP_URL || 'https://elquelo.com'}/${tempQrCode}`
          setQrData({ code: tempQrCode, url: tempQrUrl })
          toast.error('No se encontraron QRs. Crea uno primero.')
        }
      } else {
        throw new Error('Failed to fetch QRs')
      }
    } catch (error) {
      console.error('Error fetching user QRs:', error)
      // Fallback a QR temporal
      const tempQrCode = `temp_${Date.now()}`
      const tempQrUrl = `${process.env.NEXT_PUBLIC_APP_URL || 'https://elquelo.com'}/${tempQrCode}`
      setQrData({ code: tempQrCode, url: tempQrUrl })
      toast.error('No se pudieron cargar los QRs. Usando QR temporal.')
    }
  }

  const handleEditorSave = (designData: { imageUrl: string; position: { x: number; y: number; scale: number; rotation: number } }) => {
    if (editingParticipant) {
      // Aquí podrías guardar la información del diseño
      console.log('Diseño guardado:', designData)
      toast.success('Diseño guardado correctamente')
    }
    setEditorOpen(false)
    setEditingParticipant(null)
    setQrData(null)
  }

  const validateStep = (current: number) => {
    if (current === 2 || current === 3) {
      if (!participants.length) {
        toast.error('Anade al menos un integrante')
        return false
      }
      if (participants.some((participant) => !participant.name.trim())) {
        toast.error('Completa el nombre de cada integrante')
        return false
      }
    }
    return true
  }

  const nextStep = () => {
    if (validateStep(step)) {
      setStep((prev) => Math.min(prev + 1, STEPS.length))
    }
  }

  const previousStep = () => setStep((prev) => Math.max(prev - 1, 1))

  const handleSaveGroup = async () => {
    if (!user) {
      router.replace('/auth/login?redirect=/configurador')
      return
    }

    if (participants.length === 0) {
      toast.error('Anade al menos una camiseta')
      return
    }

    setGenerating(true)
    setKitGenerated(false)
    setCreatedCodes([])

    try {
      const normalizedGroupName = groupName.trim()

      const payload = {
        destination_url: defaultQrUrl,
        description: normalizedGroupName ? `Kit ${normalizedGroupName}` : 'Kit personalizado',
        group: normalizedGroupName || undefined,
        members: participants.map((participant) => ({
          name: participant.name,
          title: normalizedGroupName ? `${normalizedGroupName} - ${participant.name}` : participant.name,
          destination_url: defaultQrUrl,
        })),
      }

      const response = await fetch('/api/qr/create', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(payload),
      })

      const data = await response.json()

      if (!response.ok || !data.success) {
        throw new Error(data.error || 'No pudimos generar los QRs')
      }

      const qrs = data.qrs as { code: string }[]
      setCreatedCodes(qrs.map((qr) => qr.code))

      // Upload design files if provided
      await Promise.all(
        participants.map(async (participant, index) => {
          if (!participant.designFile) return

          const formData = new FormData()
          formData.append('code', qrs[index].code)
          formData.append('file', participant.designFile)

          const upload = await fetch('/api/design/upload', {
            method: 'POST',
            body: formData,
          })

          if (!upload.ok) {
            const error = await upload.json().catch(() => ({}))
            console.error('Design upload error', error)
            toast.error(`No se pudo subir el diseno de ${participant.name}`)
          }
        })
      )

      setKitGenerated(true)
      toast.success('¡Grupo creado exitosamente! Ahora puedes diseñar las camisetas en el dashboard.')
      
      // Redirect to dashboard
      setTimeout(() => {
        router.push('/dashboard')
      }, 2000)
    } catch (error) {
      console.error(error)
      toast.error('No pudimos crear el grupo. Intentalo de nuevo.')
    } finally {
      setGenerating(false)
    }
  }

  const handleConfirmOrder = async () => {
    if (!user) {
      toast.error('Debes iniciar sesión para continuar')
      return
    }

    setGenerating(true)

    try {
      // Calculate total price
      const totalPrice = participants.length * BASE_PRICE

      // Prepare checkout items
      const checkoutItems = participants.map((participant) => ({
        name: `Camiseta ${participant.name}`,
        description: `Camiseta personalizada para ${participant.name}`,
        price: BASE_PRICE,
        quantity: 1,
        size: participant.size,
        color: 'white', // Default color
        participant_id: participant.id,
      }))

      // Create checkout session
      const checkoutResponse = await fetch('/api/checkout', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          items: checkoutItems,
          productType: 'evento',
        }),
      })

      if (!checkoutResponse.ok) {
        throw new Error('Error creando sesión de pago')
      }

      const { sessionId } = await checkoutResponse.json()

      // Redirect to Stripe checkout
      window.location.href = `/checkout?session_id=${sessionId}`
    } catch (error) {
      console.error('Error en checkout:', error)
      toast.error('Error procesando el pedido. Inténtalo de nuevo.')
    } finally {
      setGenerating(false)
    }
  }

  if (loading || checkingAccess) {
    return (
      <div className="flex min-h-screen items-center justify-center bg-gray-50">
        <Loader2 className="h-8 w-8 animate-spin text-primary-600" />
      </div>
    )
  }

  if (!user) {
    return null
  }

  return (
    <div className="min-h-screen bg-gray-50">
      <Header />
      <div className="mx-auto max-w-5xl px-4 py-12 sm:py-16">
        <div className="mb-10 max-w-3xl">
          <button
            onClick={() => router.back()}
            className="inline-flex items-center gap-2 text-sm font-semibold text-primary-600 transition hover:text-primary-700"
          >
            <ArrowLeft className="h-4 w-4" /> Volver
          </button>
          <h1 className="mt-4 text-3xl font-bold sm:text-4xl">Configura tu kit</h1>
          <p className="mt-2 text-gray-600">
            Anade a las personas de la despedida y decide sus camisetas. Nosotros nos encargamos del resto.
          </p>
        </div>

        <div className="mb-12 flex flex-wrap items-center gap-3 text-sm font-semibold text-gray-500">
          {STEPS.map((label, index) => {
            const value = index + 1
            return (
              <div
                key={label}
                className={`flex items-center gap-2 rounded-full border px-4 py-1.5 transition ${
                  step === value ? 'border-primary-500 bg-primary-100 text-primary-700' : 'border-gray-200 bg-white'
                }`}
              >
                <span className="h-6 w-6 rounded-full bg-gray-900/5 text-center text-xs font-bold leading-6 text-gray-700">
                  {value}
                </span>
                {label}
              </div>
            )
          })}
        </div>

        {step === 1 && (
          <section className="space-y-6 rounded-3xl border border-gray-100 bg-white p-8 shadow-sm">
            <h2 className="text-xl font-semibold text-gray-900">Datos del grupo</h2>
            <div className="grid gap-6 sm:grid-cols-2">
              <div className="space-y-2">
                <label className="text-sm font-medium text-gray-700">Nombre del grupo (opcional)</label>
                <input
                  type="text"
                  value={groupName}
                  onChange={(event) => setGroupName(event.target.value)}
                  className="w-full rounded-xl border border-gray-200 px-4 py-3 text-sm font-medium text-gray-900 shadow-sm focus:border-primary-500 focus:outline-none focus:ring-2 focus:ring-primary-100"
                  placeholder="Despedida de Laura"
                />
              </div>
              <div className="space-y-2">
                <label className="text-sm font-medium text-gray-700 flex items-center gap-2">
                  <Calendar className="h-4 w-4 text-primary-500" /> Fecha del evento (opcional)
                </label>
                <input
                  type="date"
                  value={eventDate}
                  onChange={(event) => setEventDate(event.target.value)}
                  className="w-full rounded-xl border border-gray-200 px-4 py-3 text-sm font-medium text-gray-900 shadow-sm focus:border-primary-500 focus:outline-none focus:ring-2 focus:ring-primary-100"
                />
              </div>
            </div>
          </section>
        )}

        {step === 2 && (
          <section className="space-y-6 rounded-3xl border border-gray-100 bg-white p-8 shadow-sm">
            <div className="space-y-4">
              <div>
                <h2 className="text-xl font-semibold text-gray-900">Integrantes</h2>
                <p className="text-sm text-gray-600">Pega un nombre por linea o anade integrantes manualmente. Podras completar tallas y disenos en el siguiente paso.</p>
              </div>
              <textarea
                rows={6}
                value={bulkNamesInput}
                onChange={(event) => setBulkNamesInput(event.target.value)}
                className="w-full rounded-2xl border border-gray-200 px-4 py-3 text-sm text-gray-900 shadow-sm focus:border-primary-500 focus:outline-none focus:ring-2 focus:ring-primary-100"
                placeholder={`Laura\nAna\nMarta`}
              />
              <div className="flex flex-wrap items-center gap-3">
                <button
                  type="button"
                  onClick={handleBulkAddParticipants}
                  disabled={!bulkNamesInput.trim()}
                  className="inline-flex items-center gap-2 rounded-full bg-primary-600 px-5 py-2 text-sm font-semibold text-white transition hover:bg-primary-700 disabled:cursor-not-allowed disabled:opacity-60"
                >
                  Anadir listado
                </button>
                <button
                  type="button"
                  onClick={addParticipant}
                  className="inline-flex items-center gap-2 rounded-full border border-primary-200 px-4 py-2 text-sm font-semibold text-primary-600 transition hover:border-primary-400"
                >
                  <Plus className="h-4 w-4" /> Anadir integrante manual
                </button>
              </div>
            </div>

            <div className="space-y-4">
              {participants.length === 0 ? (
                <div className="rounded-3xl border border-dashed border-gray-200 bg-gray-50 p-10 text-center text-sm text-gray-500">
                  Todavia no has anadido integrantes. Usa el listado o anade uno manual.
                </div>
              ) : (
                participants.map((participant, index) => (
                  <div
                    key={participant.id}
                    className="flex flex-col gap-4 rounded-3xl border border-gray-100 bg-gray-50 p-5 sm:flex-row sm:items-center sm:justify-between"
                  >
                    <div className="flex flex-1 items-start gap-4">
                      <span className="hidden h-9 w-9 items-center justify-center rounded-full bg-primary-100 text-sm font-semibold text-primary-600 sm:flex">
                        {index + 1}
                      </span>
                      <div className="flex-1 space-y-2">
                        <label className="text-xs font-semibold uppercase tracking-[0.2em] text-gray-500">Nombre</label>
                        <input
                          type="text"
                          value={participant.name}
                          onChange={(event) => updateParticipant(participant.id, { name: event.target.value })}
                          className="w-full rounded-xl border border-gray-200 px-4 py-3 text-sm text-gray-900 shadow-sm focus:border-primary-500 focus:outline-none focus:ring-2 focus:ring-primary-100"
                          placeholder="Nombre del integrante"
                        />
                      </div>
                    </div>
                    <div className="flex items-center justify-end gap-2">
                      <button
                        onClick={() => removeParticipant(participant.id)}
                        className="inline-flex h-10 w-10 items-center justify-center rounded-full border border-gray-200 text-gray-500 transition hover:border-red-200 hover:text-red-500"
                        aria-label="Eliminar integrante"
                      >
                        <Trash2 className="h-4 w-4" />
                      </button>
                    </div>
                  </div>
                ))
              )}
            </div>
          </section>
        )}


        {step === 3 && (
          <section className="space-y-6 rounded-3xl border border-gray-100 bg-white p-8 shadow-sm">
            <div className="text-center">
              <h2 className="text-xl font-semibold text-gray-900">Crear Grupo</h2>
              <p className="text-sm text-gray-600">Revisa los integrantes y crea el grupo para empezar a diseñar.</p>
            </div>

            {/* Resumen de participantes */}
            <div className="bg-gray-50 rounded-2xl p-6">
              <h3 className="text-lg font-medium text-gray-900 mb-4">
                {participants.length} participante{participants.length > 1 ? 's' : ''} en el grupo
              </h3>
              <div className="space-y-3">
                {participants.map((participant, index) => (
                  <div key={participant.id} className="flex items-center justify-between bg-white rounded-lg p-3">
                    <div className="flex items-center gap-3">
                      <div className="w-8 h-8 bg-primary-100 rounded-full flex items-center justify-center text-sm font-medium text-primary-600">
                        {index + 1}
                      </div>
                      <div>
                        <div className="font-medium text-gray-900">{participant.name}</div>
                        <div className="text-sm text-gray-500">{participant.email}</div>
                      </div>
                    </div>
                    <div className="text-sm text-gray-500">
                      Talla: {participant.size}
                    </div>
                  </div>
                ))}
              </div>
            </div>

            {participants.length === 0 ? (
              <div className="rounded-3xl border border-dashed border-gray-200 bg-gray-50 p-10 text-center text-sm text-gray-500">
                Primero anade la lista de integrantes en el paso anterior.
                <div className="mt-4">
                  <button
                    type="button"
                    onClick={() => setStep(2)}
                    className="inline-flex items-center gap-2 rounded-full border border-primary-200 px-4 py-2 text-sm font-semibold text-primary-600 transition hover:border-primary-400"
                  >
                    <ArrowLeft className="h-4 w-4" /> Volver a integrantes
                  </button>
                </div>
              </div>
            ) : (
              <div className="space-y-4">
                {participants.map((participant) => (
                  <div key={participant.id} className="rounded-3xl border border-gray-100 bg-gray-50/60 p-6 transition hover:border-primary-200">
                    <div className="flex flex-col gap-4 sm:flex-row sm:items-start sm:justify-between">
                      <div className="grid flex-1 gap-4 sm:grid-cols-2">
                        <div className="space-y-2">
                          <label className="text-sm font-medium text-gray-700">Nombre</label>
                          <input
                            type="text"
                            value={participant.name}
                            onChange={(event) => updateParticipant(participant.id, { name: event.target.value })}
                            className="w-full rounded-xl border border-gray-200 px-4 py-3 text-sm text-gray-900 shadow-sm focus:border-primary-500 focus:outline-none focus:ring-2 focus:ring-primary-100"
                          />
                        </div>
                        <div className="space-y-2">
                          <label className="text-sm font-medium text-gray-700">Email (para compartir el QR opcional)</label>
                          <input
                            type="email"
                            value={participant.email}
                            onChange={(event) => updateParticipant(participant.id, { email: event.target.value })}
                            className="w-full rounded-xl border border-gray-200 px-4 py-3 text-sm text-gray-900 shadow-sm focus:border-primary-500 focus:outline-none focus:ring-2 focus:ring-primary-100"
                            placeholder="laura@email.com"
                          />
                        </div>
                        <div className="space-y-2">
                          <label className="text-sm font-medium text-gray-700">Talla</label>
                          <select
                            value={participant.size}
                            onChange={(event) => updateParticipant(participant.id, { size: event.target.value })}
                            className="w-full rounded-xl border border-gray-200 px-4 py-3 text-sm text-gray-900 shadow-sm focus:border-primary-500 focus:outline-none focus:ring-2 focus:ring-primary-100"
                          >
                            {SIZES.map((size) => (
                              <option key={size} value={size}>
                                {size}
                              </option>
                            ))}
                          </select>
                        </div>
                        <div className="space-y-2">
                          <label className="text-sm font-medium text-gray-700">Diseno PNG</label>
                          <label className="flex h-full cursor-pointer items-center justify-between rounded-2xl border border-dashed border-gray-300 px-4 py-3 text-sm font-medium text-gray-600 transition hover:border-primary-400 hover:text-primary-600">
                            <span className="flex items-center gap-2">
                              <Upload className="h-4 w-4" />
                              {participant.designFile ? participant.designFile.name : 'Subir archivo PNG'}
                            </span>
                            <input
                              type="file"
                              accept="image/png"
                              className="hidden"
                              onChange={(event) => {
                                const file = event.target.files?.[0]
                                if (file && file.type !== 'image/png') {
                                  toast.error('El diseno debe ser un PNG')
                                  return
                                }
                                updateParticipant(participant.id, { designFile: file ?? null })
                              }}
                            />
                          </label>
                        </div>
                      </div>

                      <button
                        onClick={() => removeParticipant(participant.id)}
                        className="inline-flex h-10 w-10 items-center justify-center rounded-full border border-gray-200 text-gray-500 transition hover:border-red-200 hover:text-red-500"
                        aria-label="Eliminar integrante"
                      >
                        <Trash2 className="h-4 w-4" />
                      </button>
                    </div>
                  </div>
                ))}
              </div>
            )}
          </section>
        )}

        {step === 4 && (
          <section className="space-y-6 rounded-3xl border border-gray-100 bg-white p-8 shadow-sm">
            <div className="flex items-center gap-3">
              <div className="rounded-2xl bg-primary-100 p-3 text-primary-600">
                <QrCode className="h-5 w-5" />
              </div>
              <div>
                <h2 className="text-xl font-semibold text-gray-900">Resumen del pedido</h2>
                <p className="text-sm text-gray-600">Genera los QRs y completa el pago cuando estes lista.</p>
              </div>
            </div>

            <div className="rounded-3xl border border-gray-100 bg-gray-50 p-6">
              <div className="grid gap-4 text-sm text-gray-700 sm:grid-cols-2">
                <div>
                  <p className="text-xs font-semibold uppercase tracking-[0.2em] text-gray-500">Despedida</p>
                  <p className="text-base font-semibold text-gray-900">{groupName.trim() ? groupName : 'Sin nombre'}</p>
                </div>
                <div>
                  <p className="text-xs font-semibold uppercase tracking-[0.2em] text-gray-500">QR inicial</p>
                  <p className="break-words text-base font-semibold text-gray-900">{defaultQrUrl}</p>
                </div>
                {formattedEventDate && (
                  <div>
                    <p className="text-xs font-semibold uppercase tracking-[0.2em] text-gray-500">Fecha del evento</p>
                    <p className="text-base font-semibold text-gray-900">{formattedEventDate}</p>
                  </div>
                )}
              </div>
              <div className="mt-6">
                <p className="text-xs font-semibold uppercase tracking-[0.2em] text-gray-500">Integrantes ({participants.length})</p>
                <ul className="mt-3 space-y-2 text-sm text-gray-700">
                  {participants.map((participant) => (
                    <li key={participant.id} className="flex items-center justify-between rounded-2xl border border-white bg-white px-4 py-3">
                      <span className="font-medium text-gray-900">{participant.name || 'Pendiente de nombre'}</span>
                      <span className="text-xs text-gray-500">Talla {participant.size}</span>
                    </li>
                  ))}
                </ul>
              </div>
              <div className="mt-6 flex items-center justify-between text-sm font-semibold text-gray-900">
                <span>Total</span>
                <span>{total.toFixed(2)} EUR</span>
              </div>
            </div>

            <div className="space-y-4">
              {!kitGenerated && (
                <button
                  onClick={handleSaveGroup}
                  disabled={generating}
                  className="inline-flex w-full items-center justify-center gap-2 rounded-full bg-primary-600 px-6 py-3 text-sm font-semibold text-white transition hover:bg-primary-700 disabled:cursor-not-allowed disabled:opacity-60"
                >
                  {generating ? (
                    <>
                      <Loader2 className="h-4 w-4 animate-spin" /> Generando QRs...
                    </>
                  ) : (
                    'Generar QRs y subir disenos'
                  )}
                </button>
              )}

              {step === 4 && (
                <div className="space-y-3">
                  <button
                    onClick={handleSaveGroup}
                    disabled={generating}
                    className="inline-flex w-full items-center justify-center gap-2 rounded-full bg-green-600 px-6 py-3 text-sm font-semibold text-white transition hover:bg-green-700 disabled:cursor-not-allowed disabled:opacity-60"
                  >
                    {generating ? (
                      <>
                        <Loader2 className="h-4 w-4 animate-spin" />
                        Creando grupo...
                      </>
                    ) : (
                      <>
                        <QrCode className="h-4 w-4" />
                        Crear Grupo (GRATIS)
                      </>
                    )}
                  </button>
                  <p className="text-center text-xs text-gray-500">
                    Crea el grupo y diseña las camisetas. Solo pagarás cuando confirmes el pedido.
                  </p>
                </div>
              )}

              {step === 5 && (
                <div className="space-y-3">
                  <CheckoutButton
                    productType="evento"
                    items={[
                      {
                        id: 'kit-despedida',
                        name: `Kit despedida (${participants.length} camisetas)`,
                        description: 'Camisetas premium con QR dinamico y panel',
                        price: BASE_PRICE * participants.length,
                        quantity: 1,
                      },
                    ]}
                    className="inline-flex w-full items-center justify-center gap-2 rounded-full bg-primary-600 px-6 py-3 text-sm font-semibold text-white transition hover:bg-primary-700 disabled:cursor-not-allowed disabled:opacity-60"
                  >
                    Confirmar Pedido y Pagar
                  </CheckoutButton>
                  <p className="text-center text-xs text-gray-500">
                    Confirma el pedido para procesar las camisetas y enviarlas a Printful.
                  </p>
                </div>
              )}
            </div>
          </section>
        )}




        <div className="mt-8 flex items-center justify-between">
          <button
            onClick={previousStep}
            disabled={step === 1}
            className="inline-flex items-center gap-2 rounded-full border border-gray-200 px-4 py-2 text-sm font-semibold text-gray-600 transition hover:border-primary-200 hover:text-primary-600 disabled:cursor-not-allowed disabled:opacity-60"
          >
            <ArrowLeft className="h-4 w-4" /> Atras
          </button>

          {step < STEPS.length && (
            <button
              onClick={nextStep}
              className="inline-flex items-center gap-2 rounded-full bg-primary-600 px-5 py-2 text-sm font-semibold text-white transition hover:bg-primary-700"
            >
              Siguiente
              <ArrowRight className="h-4 w-4" />
            </button>
          )}
        </div>
      </div>

      <Footer />
      
      {/* Editor de Camisetas */}
      {editorOpen && editingParticipant && qrData && (
        <TShirtEditor
          isOpen={editorOpen}
          onClose={() => {
            setEditorOpen(false)
            setEditingParticipant(null)
            setQrData(null)
          }}
          qrCode={qrData.code}
          qrUrl={qrData.url}
          participantName={editingParticipant.name}
          onSave={handleEditorSave}
        />
      )}
    </div>
  )
}
